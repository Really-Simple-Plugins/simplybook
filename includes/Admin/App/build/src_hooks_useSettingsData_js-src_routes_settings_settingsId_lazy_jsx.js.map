{"version":3,"file":"src_hooks_useSettingsData_js-src_routes_settings_settingsId_lazy_jsx.js","mappings":"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","sources":["webpack://simplybook_app/./src/hooks/useSettingsData.js","webpack://simplybook_app/./src/routes/settings/$settingsId.lazy.jsx"],"sourcesContent":["import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Route } from '../routes/settings/$settingsId.lazy';\n\n/**\n * Custom hook for managing settings data using Tanstack Query.\n * This hook provides functions to fetch and update settings.\n *\n * @returns {Object} - An object containing settings data, update function, and status flags.\n */\nconst useSettingsData = () => {\n  const queryClient = useQueryClient();\n\n  // Query for fetching settings from server\n  const query = useQuery({\n    queryKey: ['settings_fields'],\n    queryFn: () => {\n      // @todo replace with actual api call.\n      return new Promise((resolve, reject) => {\n        console.log('call api');\n        if (window.simplybook && window.simplybook.settings_fields) {\n          resolve(window.simplybook.settings_fields);\n        }\n        reject(new Error('Settings not found'));\n      });\n    },\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    initialData: window.simplybook && window.simplybook.settings_fields,\n  });\n\n  // Update Mutation for settings data with destructured values\n  const { mutate: saveSettings, isLoading: isSavingSettings } = useMutation({\n    mutationFn: (data) => {\n      console.log('mutate data', data);\n      // Simulate async operation\n      return new Promise((resolve) => setTimeout(resolve, 10000));\n    },\n    onSuccess: () => {\n      // Invalidate cache by specific query key for updated data\n      queryClient.invalidateQueries(['settings_fields']);\n    },\n  });\n\n  return {\n    settings: query.data,\n    saveSettings: saveSettings,\n    isSavingSettings: isSavingSettings,\n    invalidateSettings: () => queryClient.invalidateQueries(['settings_fields']),\n  };\n};\n\nexport default useSettingsData;\n","import {createLazyFileRoute} from '@tanstack/react-router';\nimport useSettingsData from '../../hooks/useSettingsData';\nimport {useForm} from 'react-hook-form';\n\nconst useSettingsLoader = (settingsId) => {\n  const menuData = window.simplybook?.settings_menu || [];\n  const settingsData = menuData.find((item) => item.id === settingsId);\n\n  if (!settingsData) {\n    throw new Error('Settings not found');\n  }\n  return {settingsData};\n};\n\n// Route Definition\nexport const Route = createLazyFileRoute('/settings/$settingsId')({\n  loader: ({params}) => useSettingsLoader(params.settingsId),\n  component: Settings,\n});\n\n// Settings Component\nfunction Settings() {\n  const {settingsId} = Route.useParams();\n  const {settings, saveSettings, isSavingSettings} = useSettingsData();\n  const {currentSection} = useSettingsMenu();\n  const defaultValues = extractDefaultValues(settings, settingsId);\n  console.log('defaultValues', defaultValues);\n  console.log('settings', settings);\n  // Initialize useForm with default values from the fetched settings data\n  const {register, handleSubmit, formState} = useForm({\n    defaultValues: defaultValues,\n  });\n\n  const onSubmit = (formData) => {\n    saveSettings(formData); // Triggers the mutation to save settings\n  };\n\n\n  console.log('groups', groups);\n\n  return (\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {groups?.map((group) => {\n          const isLastGroup = lastGroup.id === group.id;\n\n          return (\n              <div key={group.id}>\n                <h2>{group.title}</h2>\n                {group.settings.map((setting) => (\n                    <div key={setting.id}>\n                      <label htmlFor={setting.id}>{setting.label}</label>\n                      <input\n                          id={setting.id}\n                          type=\"text\"\n                          {...register(setting.id)}\n                      />\n                    </div>\n                ))}\n              </div>\n          );\n        })}\n        <button type=\"submit\" disabled={isSavingSettings}>\n          Save\n        </button>\n      </form>\n  );\n}\n\nconst extractDefaultValues = (settings, settingsId) => {\n  // Extract default values from settings data where menu_id ===  settingsId\n  const defaultValues = {};\n  settings.forEach((setting) => {\n    if (setting.menu_id === settingsId) {\n      defaultValues[setting.id] = setting.value;\n    }\n  });\n\n  return defaultValues;\n};"],"names":["useMutation","useQuery","useQueryClient","Route","useSettingsData","queryClient","query","queryKey","queryFn","Promise","resolve","reject","console","log","window","simplybook","settings_fields","Error","staleTime","initialData","mutate","saveSettings","isLoading","isSavingSettings","mutationFn","data","setTimeout","onSuccess","invalidateQueries","settings","invalidateSettings","createLazyFileRoute","useForm","useSettingsLoader","settingsId","menuData","settings_menu","settingsData","find","item","id","loader","params","component","Settings","useParams","currentSection","useSettingsMenu","defaultValues","extractDefaultValues","register","handleSubmit","formState","onSubmit","formData","groups","createElement","map","group","isLastGroup","lastGroup","key","title","setting","htmlFor","label","type","disabled","forEach","menu_id","value"],"sourceRoot":""}