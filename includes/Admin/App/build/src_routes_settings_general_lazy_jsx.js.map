{"version":3,"file":"src_routes_settings_general_lazy_jsx.js","mappings":"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AQ,GAAG,WAAW,GAAG,MACpB,CACL,CAAC;AAEV,CAAC;;;;;;;;;;;;;;;;;;AC7CD;AACgD;AACG;AACF;AACS;AAC1D,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8DAAmB;AAC5B;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,gEAAgE,kDAAO,8BAA8B,kDAAO;AAC5G;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6DAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AAGE;AACF;;;;;;;;;;;;;;;;;;;ACrGA;;AAEA;AAC+B;AACwC;AACb;AACN;AACpD;AACA,iBAAiB,uEAAc;AAC/B,qBAAqB,2CAAc;AACnC,cAAc,kEAAgB;AAC9B;AACA;AACA;AACA;AACA,EAAE,4CAAe;AACjB;AACA,GAAG;AACH,iBAAiB,uDAA0B;AAC3C,IAAI,8CAAiB;AACrB,4CAA4C,+DAAa;AACzD;AACA;AACA;AACA;AACA;AACA,iBAAiB,8CAAiB;AAClC;AACA,sDAAsD,2CAAI;AAC1D,KAAK;AACL;AACA;AACA,sBAAsB,2DAAgB;AACtC;AACA;AACA,WAAW;AACX;AAGE;AACF","sources":["webpack://simplybook_app/./src/components/Blocks/Block.jsx","webpack://simplybook_app/./src/components/Blocks/BlockHeading.jsx","webpack://simplybook_app/./src/hooks/useSettingsData.js","webpack://simplybook_app/./src/routes/settings/general.lazy.jsx","webpack://simplybook_app/./node_modules/@tanstack/query-core/build/modern/mutationObserver.js","webpack://simplybook_app/./node_modules/@tanstack/react-query/build/modern/useMutation.js"],"sourcesContent":["const Block = ({ colSpan, rowSpan, children }) => {\n  const classes = `bg-white shadow-md rounded-md col-span-${colSpan} row-span-${rowSpan}`;\n\n  return <div className={classes}>{children}</div>;\n};\n\nexport default Block;","const BlockHeading = ({title, controls }) => {\n\n  return (\n      <div className=\"py-4 px-5 flex justify-between items-center\">\n        <h2 className=\"text-base font-bold\">{title}</h2>\n        {controls}\n      </div>\n  )\n}\nexport default BlockHeading;","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for managing settings data using Tanstack Query.\n * This hook provides functions to fetch and update settings.\n *\n * @returns {Object} - An object containing settings data, update function, and status flags.\n */\nconst useSettingsData = () => {\n  const queryClient = useQueryClient();\n\n  // Store for managing local changes before saving\n  const [localSettings, setLocalSettings] = useState({});\n\n  // Placeholder settings array to simulate settings from server\n  const placeholderSettings = {\n    'general': {\n    'authentication': {\n      'apiKey': {\n        'label': 'API Key',\n        'type': 'text',\n        'value': '1234567890',\n      },\n      'apiSecret': {\n        'label': 'API Secret',\n        'type': 'text',\n        'value': '1234567890',\n      },\n    },\n      'widgets': {\n      'bookings_page': {\n        'label': 'Bookings Page',\n        'type': 'text',\n        'value': 'https://simplybook.me',\n      },\n      'calendar_page': {\n        'label': 'Calendar Page',\n        'type': 'text',\n        'value': 'https://simplybook.me',\n      },\n        'short_code': {\n          'label': 'Short Code',\n          'type': 'text',\n          'value': '1234567890',\n        },\n      }\n    },\n    'providers': {\n      'name': {\n        'label': 'Name',\n        'type': 'text',\n        'value': 'John Doe',\n      },\n      'email': {\n        'label': 'Email',\n        'type': 'email',\n        'value': '',\n      },\n      'phone': {\n        'label': 'Phone',\n        'type': 'tel',\n        'value': '',\n      },\n    }\n  };\n\n  // Placeholder function for fetching settings from server\n  const fetchSettings = async () => {\n    // Simulate an API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(placeholderSettings);\n      }, 1000);\n    });\n  };\n\n  // Placeholder function for updating settings on server\n  const updateSettings = async (updatedSettings) => {\n    // Simulate an API call\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(updatedSettings);\n      }, 1000);\n    });\n  };\n\n  // Query for fetching settings from server\n  const { data: settings, isLoading, isError } = useQuery({\n    queryKey: ['settings'],\n    queryFn: fetchSettings,\n    onSuccess: (data) => {\n      // Set initial settings to state\n      setLocalSettings(data);\n    },\n    staleTime: 60000, // Keep data fresh for 1 minute\n  });\n\n  // Mutation for updating settings on server\n  const updateSettingsMutation = useMutation({\n    mutationFn: updateSettings,\n    onSuccess: () => {\n      // Invalidate and refetch settings after successful update\n      queryClient.invalidateQueries(['settings']);\n    },\n  });\n\n  /**\n   * Function to handle updating local settings state.\n   *\n   * @param {string} key - The key of the setting to update.\n   * @param {any} value - The new value for the setting.\n   */\n  const updateSetting = (key, value) => {\n    setLocalSettings((prevSettings) => ({\n      ...prevSettings,\n      [key]: value,\n    }));\n  };\n\n  /**\n   * Function to save the updated settings to the server.\n   */\n  const saveSettings = () => {\n    updateSettingsMutation.mutate(localSettings);\n  };\n\n  useEffect(() => {\n    // Sync localSettings with fetched settings\n    if (settings) {\n      setLocalSettings(settings);\n    }\n  }, [settings]);\n\n  return {\n    settings: localSettings,\n    updateSetting,\n    saveSettings,\n    isLoading,\n    isError,\n    isSaving: updateSettingsMutation.isLoading,\n  };\n};\n\nexport default useSettingsData;\n","import { createLazyFileRoute } from '@tanstack/react-router'\nimport useSettingsData from '../../hooks/useSettingsData'\nimport  Block  from '../../components/Blocks/Block'\nimport BlockHeading from '../../components/Blocks/BlockHeading';\n\n\nexport const Route = createLazyFileRoute('/settings/general')({\n  component: () => <Settings menu_id=\"general\" />,\n})\n\nconst Settings = ({ menu_id }) => {\n    const {\n      settings,\n      updateSetting,\n      saveSettings,\n      isLoading,\n      isSaving,\n      isError,\n    } = useSettingsData();\n\n    if (isLoading) return <div>Loading settings...</div>;\n    if (isError) return <div>Error loading settings</div>;\n\n  // only get settings for the current menu_id\n  const currentSettings = settings[menu_id];\n\n  // loop through object currentSettings and create groups of settings, loop again for fields\n  return (\n    <div>\n      {currentSettings && Object.keys(currentSettings).map((group) => (\n        <Block key={group} title={group}>\n          <BlockHeading title={group} />\n          {/*{currentSettings[group].map((field) => (*/}\n          {/*  // <Field type={field.type} key={field.key} {...field} onChange={(value) => updateSetting(field.key, value)} />*/}\n          {/*    console.log(field)*/}\n          {/*))}*/}\n          <h2>Group: {group}</h2>\n        </Block>\n      ))}\n\n      <button onClick={saveSettings} disabled={isSaving}>\n        {isSaving ? 'Saving...' : 'Save'}\n      </button>\n    </div>\n  );\n}","// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  #client;\n  #currentResult = void 0;\n  #currentMutation;\n  #mutateOptions;\n  constructor(client, options) {\n    super();\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    } else if (this.#currentMutation?.state.status === \"pending\") {\n      this.#currentMutation.setOptions(this.options);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const context = this.#currentResult.context;\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context);\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, variables, context);\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            variables,\n            context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { noop, shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map"],"names":["Block","colSpan","rowSpan","children","classes","createElement","className","BlockHeading","title","controls","useQuery","useMutation","useQueryClient","useState","useEffect","useSettingsData","queryClient","localSettings","setLocalSettings","placeholderSettings","fetchSettings","Promise","resolve","setTimeout","updateSettings","updatedSettings","data","settings","isLoading","isError","queryKey","queryFn","onSuccess","staleTime","updateSettingsMutation","mutationFn","invalidateQueries","updateSetting","key","value","prevSettings","saveSettings","mutate","isSaving","createLazyFileRoute","Route","component","Settings","menu_id","currentSettings","Object","keys","map","group","onClick","disabled"],"sourceRoot":""}