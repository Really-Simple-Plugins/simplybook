stages:
  - test

# Setup PHP + Composer template
.setup_php:
  image: php:7.4-cli
  before_script:
    # OS deps for Composer (needed for dist/source installs)
    - apt-get update -qq
    - apt-get install -yqq --no-install-recommends git unzip libzip-dev > /dev/null
    - docker-php-ext-configure zip >/dev/null
    - docker-php-ext-install -j"$(nproc)" zip >/dev/null

    # Composer (verified install)
    - curl -sSL https://composer.github.io/installer.sig -o installer.sig
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('SHA384', 'composer-setup.php') !== trim(file_get_contents('installer.sig'))) { echo 'Invalid composer installer'.PHP_EOL; unlink('composer-setup.php'); exit(1); }"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - rm -f composer-setup.php installer.sig

    # Install PHP deps (fast & deterministic with lock file from repo)
    - composer install --no-interaction --no-progress --prefer-dist --quiet
  cache:
    key: "$CI_COMMIT_REF_SLUG-composer"
    paths:
      - vendor/

test:phpcs:reviewdog:
  stage: test
  extends: .setup_php
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: never
  script:
    - |
      # Install reviewdog
      curl -sSfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b /usr/local/bin

      # Run PHPCS but don't abort the shell on non-zero
      set +e
      vendor/bin/phpcs -q --report=checkstyle > phpcs-checkstyle.xml
      PHPCS_EXIT=$?
      set -e

      # Post inline MR comments; FAIL if any finding (warnings or errors) exists
      reviewdog -f=checkstyle \
        -name="PHPCS" \
        -reporter=gitlab-mr-discussion \
        -filter-mode=diff_context \
        -level=warning \
        -fail-level=any \
        < phpcs-checkstyle.xml

      # Hard-fail on PHPCS config/usage errors, otherwise mirror PHPCS (0/1)
      if [ "$PHPCS_EXIT" -ge 2 ]; then
        echo "PHPCS failed (config/usage)."
        exit "$PHPCS_EXIT"
      fi
      exit "$PHPCS_EXIT"
  variables:
    REVIEWDOG_GITLAB_API_SERVER: "$CI_SERVER_URL/api/v4"
    REVIEWDOG_GITLAB_API_TOKEN: "$REVIEWDOG_GITLAB_API_TOKEN"

#
## PHP CodeSniffer checks
#test:phpcs:
#  stage: test
#  extends: .setup_php
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#    - when: never
#  script:
#    - | # Multiline script
#      set +e
#      vendor/bin/phpcs -q
#      PHPCS_EXIT=$?
#      set -e
#
#      if [ "$PHPCS_EXIT" -ne 0 ]; then
#        echo "⚠️  PHPCS found errors, generating reports..."
#        vendor/bin/phpcs -q \
#          --report=full --report-file=phpcs-report.txt \
#          --report-checkstyle=phpcs-checkstyle.xml
#      else
#        echo "✅ PHPCS passed without errors."
#      fi
#
#      exit $PHPCS_EXIT
#  artifacts:
#    when: on_failure
#    paths:
#      - phpcs-report.txt
#      - phpcs-checkstyle.xml
#    expire_in: 1 week
