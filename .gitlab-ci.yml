stages:
  - test

# Setup PHP + Composer template
.setup_php:
  image: php:7.4-cli
  before_script:
    # OS deps for Composer (needed for dist/source installs)
    - apt-get update -qq
    - apt-get install -yqq --no-install-recommends git unzip libzip-dev > /dev/null
    - docker-php-ext-configure zip >/dev/null
    - docker-php-ext-install -j"$(nproc)" zip >/dev/null

    # Composer (verified install)
    - curl -sSL https://composer.github.io/installer.sig -o installer.sig
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('SHA384', 'composer-setup.php') !== trim(file_get_contents('installer.sig'))) { echo 'Invalid composer installer'.PHP_EOL; unlink('composer-setup.php'); exit(1); }"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - rm -f composer-setup.php installer.sig

    # Install PHP deps (fast & deterministic with lock file from repo)
    - composer install --no-interaction --no-progress --prefer-dist --quiet
  cache:
    key: "$CI_COMMIT_REF_SLUG-composer"
    paths:
      - vendor/

# PHP CodeSniffer checks
test:phpcs:
  stage: test
  extends: .setup_php
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - when: never
  script:
    - | #multiline step to preserve PHPCS_EXIT between steps
      # Run PHPCS once without writing a report and capture exit code
      vendor/bin/phpcs
      PHPCS_EXIT=$?
      # If there are errors, generate report
      if [ "$PHPCS_EXIT" -ne 0 ]; then
        vendor/bin/phpcs --report=full --report-file=$CI_PROJECT_DIR/phpcs-report.txt --report-checkstyle=$CI_PROJECT_DIR/phpcs-checkstyle.xml
      fi
      # Exit with the original $PHPCS_EXIT
      exit $PHPCS_EXIT
  artifacts:
    when: on_failure
    paths:
      - phpcs-report.txt
      - phpcs-checkstyle.xml
    expire_in: 1 week
